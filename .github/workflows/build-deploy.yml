name: Deploy Reactjs to AWS Web App

on:
  push:
    branches: [ "main" ]

env:
  # REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  # REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  # REGISTRY_URL: ${{ secrets.REGISTRY_URL }}

  DOCKERHUB_USERNAME: truongwf1204
  DOCKERHUB_PASSWORD: Truong@1204
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SSH_HOST: 13.214.181.89
  SSH_USERNAME: root
  SSH_PORT: 22
  IMAGE_NAME: react-app
  CONTAINER_NAME: react-app
  DOCKERFILE_PATH: ./Dockerfile
  DOCKER_NETWORK: react-app
  HOST_PORT: 4000
  CONTAINER_PORT: 80


jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # - name: Set up SSH keys
      #   uses: webfactory/ssh-agent@v0.5.3
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # - name: Get necessary file 
      #   run: |
      #     scp -o StrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no -P $SSH_PORT $SSH_USERNAME@$SSH_HOST:/var/opt/acsta-be/production/.env .
      #     scp -o StrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no -P $SSH_PORT $SSH_USERNAME@$SSH_HOST:/var/opt/acsta-be/production/credentials.yml.enc ./config/
      #     scp -o StrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no -P $SSH_PORT $SSH_USERNAME@$SSH_HOST:/var/opt/acsta-be/production/master.key ./config/
      #     scp -o StrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no -P $SSH_PORT $SSH_USERNAME@$SSH_HOST:/var/opt/acsta-be/production/database.yml ./config/
      #     ls -la 

      - name: Build Docker image
        run: docker build --platform linux/amd64 -f $DOCKERFILE_PATH --no-cache -t $IMAGE_NAME .

      # - name: Run and Health Check Service
      #   run: |
      #     docker-compose -f ./deploy/docker-compose.yml up -d db
      #     docker run --name $CONTAINER_NAME --env-file ./.env -dp $HOST_PORT:$CONTAINER_PORT --network $DOCKER_NETWORK $IMAGE_NAME
      #     sleep 120
      #     URL_HEAL_CHECK=http://localhost:$HOST_PORT
      #     CHECK=$(curl -o /dev/null -s -w "%{http_code}\n" $URL_HEAL_CHECK)
      #     if [ "$CHECK" -lt "200" ] || [ "$CHECK" -ge "500" ]; then
      #       echo "Health check failed with status code: $CHECK"
      #       exit 1
      #     fi

      # - name: Log in to Docker registry
      #   run: docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD $REGISTRY_URL
      - name: Log in to Docker Hub
        run: docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD

      - name: Push Docker image
        run: |
         docker tag $IMAGE_NAME $DOCKERHUB_USERNAME/$IMAGE_NAME
         docker push $DOCKERHUB_USERNAME/$IMAGE_NAME


      # - name: Push Docker image
      #   run: |
      #     docker tag $IMAGE_NAME $REGISTRY_URL/$IMAGE_NAME
      #     docker push $REGISTRY_URL/$IMAGE_NAME

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up SSH keys
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: SSH into server and run Docker
        run: |
            ssh -o StrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no -p $SSH_PORT $SSH_USERNAME@$SSH_HOST <<EOF
              echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
              docker pull $DOCKERHUB_USERNAME/$IMAGE_NAME
              if [ "\$(docker ps -q -af name=$CONTAINER_NAME)" ]; then docker rm -f $CONTAINER_NAME; fi
              if [[ ! "\$(docker images -q $IMAGE_NAME 2> /dev/null)" == "" ]]; then docker rmi -f $IMAGE_NAME; fi
              docker tag \$(docker image inspect -f '{{ .ID }}' $DOCKERHUB_USERNAME/$IMAGE_NAME:latest) $IMAGE_NAME
              if ! docker network inspect "$DOCKER_NETWORK" >/dev/null 2>&1; then echo "Network '$DOCKER_NETWORK' does not exist. Creating..." && docker network create "$DOCKER_NETWORK" && sleep 2; fi
              docker run --name $CONTAINER_NAME -dp $HOST_PORT:$CONTAINER_PORT --network $DOCKER_NETWORK $IMAGE_NAME
            EOF

      # - name: SSH into server and run Docker
      #   run: |
      #       ssh -o StrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no -p $SSH_PORT $SSH_USERNAME@$SSH_HOST <<EOF
      #         echo "$REGISTRY_PASSWORD" | docker login $REGISTRY_URL --username $REGISTRY_USERNAME --password-stdin
      #         docker pull $REGISTRY_URL/$IMAGE_NAME
      #         if [ "\$(docker ps -q -af name=$CONTAINER_NAME)" ]; then docker rm -f $CONTAINER_NAME; fi
      #         if [[ ! "\$(docker images -q $IMAGE_NAME 2> /dev/null)" == "" ]]; then docker rmi -f $IMAGE_NAME; fi
      #         docker tag \$(docker image inspect -f '{{ .ID }}' $REGISTRY_URL/$IMAGE_NAME:latest) $IMAGE_NAME
      #         if ! docker network inspect "$DOCKER_NETWORK" >/dev/null 2>&1; then echo "Network '$DOCKER_NETWORK' does not exist. Creating..." && docker network create "$DOCKER_NETWORK" && sleep 2; fi
      #         docker run --name $CONTAINER_NAME -dp $HOST_PORT:$CONTAINER_PORT --network $DOCKER_NETWORK $IMAGE_NAME
      #       EOF